//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.myNoteBookSampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class NoteBook { }
#else

	public class NoteBook : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public NoteBook()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/ListboxTutorial;component/SampleData/myNoteBookSampleDataSource/myNoteBookSampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private NoteCollection _NoteCollection = new NoteCollection();

		public NoteCollection NoteCollection
		{
			get
			{
				return this._NoteCollection;
			}
		}
	}

	public class Note : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Title = string.Empty;

		public string Title
		{
			get
			{
				return this._Title;
			}

			set
			{
				if (this._Title != value)
				{
					this._Title = value;
					this.OnPropertyChanged("Title");
				}
			}
		}

		private string _CreationTime = string.Empty;

		public string CreationTime
		{
			get
			{
				return this._CreationTime;
			}

			set
			{
				if (this._CreationTime != value)
				{
					this._CreationTime = value;
					this.OnPropertyChanged("CreationTime");
				}
			}
		}

		private string _Content = string.Empty;

		public string Content
		{
			get
			{
				return this._Content;
			}

			set
			{
				if (this._Content != value)
				{
					this._Content = value;
					this.OnPropertyChanged("Content");
				}
			}
		}
	}

	public class NoteCollection : System.Collections.ObjectModel.ObservableCollection<Note>
	{ 
	}
#endif
}
